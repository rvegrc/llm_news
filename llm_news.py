# üì¶ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import os
import re
from typing import List
from operator import itemgetter

# for .env file support and get access to api keys
from dotenv import load_dotenv
load_dotenv()

# üì¶ –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import pandas as pd
from pydantic import BaseModel, Field

# üöÄ LangChain –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
from langchain.prompts import PromptTemplate
from langchain_core.prompts import ChatPromptTemplate
from langchain_ollama.llms import OllamaLLM
from langchain.chat_models import ChatOpenAI
from langchain.chains import LLMChain
from langchain_core.output_parsers import StrOutputParser
from langchain.output_parsers import (
    PydanticOutputParser,
    StructuredOutputParser,
    OutputFixingParser,
)
from langchain_community.document_loaders import PyPDFLoader, Docx2txtLoader
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_core.documents import Document
from langchain_core.runnables import (
    Runnable,
    RunnablePassthrough,
    chain,
    RunnableConfig,
)

# üîé Graph Retriever
from langchain_graph_retriever import GraphRetriever
from graph_retriever.strategies import Eager
from langchain.schema import Document  # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç Document
from dotenv import load_dotenv
import glob
from langchain_core.documents import Document
from langchain_huggingface.embeddings import HuggingFaceEmbeddings
from langchain_chroma import Chroma
from langchain_deepseek import ChatDeepSeek

from multiprocessing import Pool


# AllKeyMoments
class AspectOneKeyMoment(BaseModel):
    aspect_key_moment: str = Field(..., description="–í—ã–≤–µ–¥–∏ –∞—Å–ø–µ–∫—Ç –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞")
    aspect_key_moment_comment: str = Field(..., description="–í—ã–≤–µ–¥–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞—Å–ø–µ–∫—Ç—É –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞")

class OneKeyMoment(BaseModel):
    # comment: str = Field(..., description="–í—ã–≤–µ–¥–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞.")
    one_key_moment: str = Field(..., description='''
                            –í—ã–≤–µ–¥–∏ –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç.
                        ''')
    all_aspects: List[AspectOneKeyMoment] = Field(..., description="–í—ã–≤–µ–¥–∏ –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞")
    one_key_moment_comment: str = Field(..., description="–í—ã–≤–µ–¥–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É –º–æ–º–µ–Ω—Ç—É")

class AllKeyMoments(BaseModel):
    all_key_moments: List[OneKeyMoment] = Field(..., description="–í—ã–≤–µ–¥–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã")
    all_key_moments_comment: str = Field(..., description="–í—ã–≤–µ–¥–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –≤—Å–µ–º –∫–ª—é—á–µ–≤—ã–º –º–æ–º–µ–Ω—Ç–∞–º")



# OneKeyMomentRatio
class AspectRatio(BaseModel):
    aspect_id: int = Field(..., description="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞—Å–ø–µ–∫—Ç–∞ –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞")
    aspect_ratio_comment: str = Field(..., description="""–°—Ä–∞–≤–Ω–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ –∞—Å–ø–µ–∫—Ç—É –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞.
                       –í—ã–≤–µ–¥–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é, —á—Ç–æ —Ä–∞—Å–∫—Ä—ã—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é, —á–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç–æ –∏ –ø–æ—á–µ–º—É —Ç—ã —Ç–∞–∫ –¥—É–º–∞–µ—à—å""")
    aspect_ratio: int = Field(..., description='''. 
                       –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —ç—Ç–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—ã–≤–µ–¥–∏ –ø–æ–ª–Ω–æ—Ç—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ 0 –¥–æ 100, –≥–¥–µ 0 - –∞—Å–ø–µ–∫—Ç –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç, 100 - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å–∫—Ä—ã—Ç''')
    
class OneKeyMomentRatio(BaseModel):
    all_aspects_ratio: List[AspectRatio] = Field(..., description="–í—ã–≤–µ–¥–∏ –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Å –∏—Ö –ø–æ–ª–Ω–æ—Ç–æ–π —Ä–∞—Å–∫—Ä—ã—Ç–∏—è")
    one_key_moment_ratio_comment: str = Field(..., description="""–°—Ä–∞–≤–Ω–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ –∫–ª—é—á–µ–≤–æ–º—É –º–æ–º–µ–Ω—Ç—É.
                       –í—ã–≤–µ–¥–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é, —á—Ç–æ —Ä–∞—Å–∫—Ä—ã—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é, —á–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç–æ –∏ –ø–æ—á–µ–º—É —Ç—ã —Ç–∞–∫ –¥—É–º–∞–µ—à—å""")
    one_key_moment_ratio: int = Field(..., description='''–ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —ç—Ç–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—ã–≤–µ–¥–∏ –ø–æ–ª–Ω–æ—Ç—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É –º–æ–º–µ–Ω—Ç—É –æ—Ç 0 –¥–æ 100,
                       –≥–¥–µ 0 - –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç, 100 - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å–∫—Ä—ã—Ç''')

llm = ChatDeepSeek(
    model="deepseek-reasoner",
    temperature=0,
    max_tokens=None,
    timeout=None,
    max_retries=2,
)

data_test_web = pd.read_csv("tmp/data_test_web.csv")[:2]


def get_all_key_moments(text_id):
    text = data_test_web.loc[text_id, 'web_text']

    parser = PydanticOutputParser(pydantic_object=AllKeyMoments)
    parser = OutputFixingParser.from_llm(parser=parser, llm=llm)

    prompt_key_points = ChatPromptTemplate.from_template(
    '''
    –í—ã–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ {web_text} —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞.
    –û—Ç–º–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞.
    –§–æ—Ä–º–∏—Ä—É–π –≤—ã–≤–æ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:{template}
    '''
    )

    llm_chain = (
        prompt_key_points
        | llm 
        | parser

    )

    # web text analyze by key moments and aspects
    
    result = llm_chain.invoke({
        'template': parser.get_format_instructions(),
        "web_text": text        
    })
    
    return {'text_id': text_id, 'result': result}

def get_all_key_moments_ratio(text_id):
    row = results[results['text_id'] == text_id]
    wkm = row['result'].values[0]

    parser = PydanticOutputParser(pydantic_object=OneKeyMomentRatio)
    parser = OutputFixingParser.from_llm(parser=parser, llm=llm)

    prompt_ratio = ChatPromptTemplate.from_template(
        '''
        –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ç–µ–∫—Å—Ç–µ: {lib_text}. —Ä–∞—Å–∫—Ä—ã—Ç —ç—Ç–æ—Ç –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç: {agg_key_moment}. –û–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–ª–Ω–æ—Ç—É —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–∞–∂–¥–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
        –∏ –ø–æ–ª–Ω–æ—Ç—É —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –∞—Å–ø–µ–∫—Ç–∞–º. –û—Ç–≤–µ—Ç –≤—ã–≤–µ–¥–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: {template}    
    '''
    )

    llm_chain_ratio = (
        prompt_ratio
        | llm
        | parser
    
    )

    df_key_moments = []

    for target_moment in wkm.all_key_moments:
        agg_key_moment = f'–∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç: {target_moment.one_key_moment}\n'
        agg_key_moment += f'–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–ª—é—á–µ–≤–æ–º—É –º–æ–º–µ–Ω—Ç—É: {target_moment.one_key_moment_comment}\n'
        agg_key_moment += '–∞—Å–ø–µ–∫—Ç—ã –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞:\n\n'
        for n, aspect in enumerate(target_moment.all_aspects):
            agg_key_moment += f'–∞—Å–ø–µ–∫—Ç c id={n}: {aspect.aspect_key_moment}\n'
            agg_key_moment += f'–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞—Å–ø–µ–∫—Ç—É c id={n}: {aspect.aspect_key_moment_comment}\n\n'


        result_ratio = llm_chain_ratio.invoke({
            'template': parser.get_format_instructions(),
            "lib_text": data_test_web["lib_text"].iloc[text_id],
            "agg_key_moment": agg_key_moment
        })

        aspects = []
        for aspect in result_ratio.all_aspects_ratio:
            aspects.append({
                    "aspect_id": aspect.aspect_id
                    ,"aspect_name": target_moment.all_aspects[aspect.aspect_id].aspect_key_moment
                    ,"aspect_comment": target_moment.all_aspects[aspect.aspect_id].aspect_key_moment_comment    
                    ,"aspect_ratio": aspect.aspect_ratio
                    ,"aspect_ratio_comment": aspect.aspect_ratio_comment
                })


        df_aspects = pd.DataFrame(aspects)
        df_aspects['key_moment'] = target_moment.one_key_moment
        df_aspects['key_moment_comment'] = target_moment.one_key_moment_comment
        df_aspects['key_moment_ratio'] = result_ratio.one_key_moment_ratio
        df_aspects['key_moment_ratio_comment'] = result_ratio.one_key_moment_ratio_comment

        df_key_moments.append(df_aspects)


        df_key_moments = pd.concat(df_key_moments, ignore_index=True).reset_index(drop=True)

        df_key_moments['text_id'] = text_id

        df_key_moments['text_ratio_mean'] = df_key_moments['key_moment_ratio'].mean()
        df_key_moments['text_ratio_median'] = df_key_moments['key_moment_ratio'].median()

    return df_key_moments


web_text_indexes = data_test_web.index.tolist()

if __name__ == "__main__":
    with Pool(processes=50) as pool:
        results = pd.DataFrame(pool.map(get_all_key_moments, web_text_indexes))

    with Pool(processes=50) as pool:
        all_key_moments_ratio = pd.DataFrame(pool.map(get_all_key_moments_ratio,web_text_indexes))
   
    df_output = pd.concat(all_key_moments_ratio, ignore_index=True).reset_index(drop=True)
    df_output.to_csv("output/web_key_moments_ratio.csv", index=False)

    data_test_web['text_id'] = data_test_web.index
    df_output_group_id = df_output.groupby('text_id').agg({
        'text_ratio_mean': 'mean',
        'text_ratio_median': 'median'
    }).reset_index()
    data_test_web = data_test_web.merge(df_output_group_id, on='text_id', how='left')

    data_test_web.to_csv("output/data_test_web.csv", index=False)